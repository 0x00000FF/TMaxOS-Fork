#!/usr/bin/env python
# Generate a traffic model from a traffic summary file
#
# Copyright (C) Catalyst IT Ltd. 2017
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import sys
import argparse

sys.path.insert(0, "bin/python")
from samba.emulate import traffic


def main():
    parser = argparse.ArgumentParser(description=__doc__,
                        formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('-o', '--out', type=argparse.FileType('w'),
                        help="write model here")
    parser.add_argument('--dns-mode', choices=['inline', 'count'],
                        help='how to deal with DNS', default='count')
    parser.add_argument('SUMMARY_FILE', nargs='*', type=argparse.FileType('r'),
                        default=[sys.stdin],
                        help="read from this file (default STDIN)")
    args = parser.parse_args()

    if not args.out:
        print >> sys.stdout, "No output file was specified to write the model to."
        print >> sys.stdout, "Please specify a filename using the --out option."
        return

    if args.SUMMARY_FILE is sys.stdin:
        print >> sys.stderr, "reading from STDIN..."

    (conversations,
     interval,
     duration,
     dns_counts) = traffic.ingest_summaries(args.SUMMARY_FILE,
                                            dns_mode=args.dns_mode)

    model = traffic.TrafficModel()
    print >> sys.stderr, "learning model"
    if args.dns_mode == 'count':
        model.learn(conversations, dns_counts)
    else:
        model.learn(conversations)

    model.save(args.out)


main()
